import numpy as np
import os
import splitfolders
import matplotlib.pyplot as plt

# tensorflow
import tensorflow.keras as keras
import tensorflow as tf

# image processing
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img

# model / neural network
from tensorflow.keras import layers
from tensorflow.keras.models import Sequential, Model
from tensorflow.keras.applications import ResNet50
from tensorflow.keras.applications.resnet50 import preprocess_input

# Split data in a new folder named data-split
splitfolders.ratio("C:/Users/indhu/OneDrive/Documents/data2/data", output="C:/Users/indhu/OneDrive/Documents/data2/data-split", seed=1337, ratio=(0.7, 0.2, 0.1), group_prefix=None, move=False) # Add a closing parenthesis

datagen = ImageDataGenerator()
class_names = ['cloudy','desert','green_area','water']

# training data
train_generator = datagen.flow_from_directory( 
    directory="C:/Users/indhu/OneDrive/Documents/data2/data-split/train/", 
    classes = class_names,
    target_size=(224, 224),  
    batch_size=32, 
    class_mode="binary", 
)

# validation data
valid_generator = datagen.flow_from_directory( 
    directory="C:/Users/indhu/OneDrive/Documents/data2/data-split/val/", 
    classes = class_names,
    target_size=(224, 224), 
    batch_size=32, 
    class_mode="binary", 
)

# test data
test_generator = datagen.flow_from_directory( 
    directory="C:/Users/indhu/OneDrive/Documents/data2/data-split/test/", 
    classes = class_names,
    target_size=(224, 224), 
    batch_size=32, 
    class_mode="binary", 
)

# ResNet50 model
resnet_50 = ResNet50(include_top=False, weights='imagenet', input_shape=(224,224,3))
for layer in resnet_50.layers:
    layer.trainable = False

# Input shape
input_shape = model.input_shape[1:]
print("Input Shape:", input_shape)

# Output shape
output_shape = model.output_shape[1:]
print("Output Shape:", output_shape)

# build the entire model
x = resnet_50.output
x = layers.GlobalAveragePooling2D()(x)
x = layers.Dense(512, activation='relu')(x) 
x = layers.Dropout(0.5)(x)
x = layers.Dense(256, activation='relu')(x) 
x = layers.Dropout(0.5)(x)
x = layers.Dense(128, activation='relu')(x) 
x = layers.Dropout(0.5)(x)
x = layers.Dense(64, activation='relu')(x) 
x = layers.Dropout(0.5)(x)
predictions = layers.Dense(4, activation='softmax')(x)
model = Model(inputs = resnet_50.input, outputs = predictions)

# define training function
def trainModel(model, epochs, optimizer):
    batch_size = 32
    model.compile(optimizer=optimizer, loss="sparse_categorical_crossentropy", metrics=["accuracy"])
    return model.fit(train_generator, validation_data=valid_generator, epochs=epochs, batch_size=batch_size)

# launch the training
model_history = trainModel(model = model, epochs = 10, optimizer = "Adam")

loss_train_curve = model_history.history["loss"]
loss_val_curve = model_history.history["val_loss"]
plt.plot(loss_train_curve, label = "Train")
plt.plot(loss_val_curve, label = "Validation")
plt.legend(loc = 'upper right')
plt.title("Loss")
plt.show()

acc_train_curve = model_history.history["accuracy"]
acc_val_curve = model_history.history["val_accuracy"]
plt.plot(acc_train_curve, label = "Train")
plt.plot(acc_val_curve, label = "Validation")
plt.legend(loc = 'lower right')
plt.title("Accuracy")
plt.show()

test_loss, test_acc = model.evaluate(test_generator)
print("The test loss is: ", test_loss)
print("The best accuracy is: ", test_acc*100)

img = tf.keras.preprocessing.image.load_img(r'C:\Users\indhu\OneDrive\Documents\data2\data-split\test\cloudy\train_2231.jpg', target_size=(224, 224))
img_array = tf.keras.preprocessing.image.img_to_array(img)
img_array = np.array([img_array]) 
img


# generate predictions for samples
predictions = model.predict(img_array)
print(predictions)

# generate argmax for predictions
class_id = np.argmax(predictions, axis = 1)
print(class_id)

# transform classes number into classes name
class_names[class_id.item()]

# Input shape
input_shape = model.input_shape[1:]
print("Input Shape:", input_shape)

# Output shape
output_shape = model.output_shape[1:]
print("Output Shape:", output_shape)

